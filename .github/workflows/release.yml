name: Release  
  
on:  
  workflow_dispatch: # 手动触发  
  push:  
    tags:  
      - 'v*.*.*' # 当推送符合版本模式的标签时触发  
    paths-ignore:  
      - '**/*.md' # 忽略 Markdown 文件的变更  
  
jobs:  
  build-and-release:  
    if: "!contains(github.ref, '.beta')" # 排除包含 .beta 的标签
    runs-on: ubuntu-latest  
    steps:  
      # 1. 检出代码，获取完整的 Git 历史记录  
      - name: Checkout  
        uses: actions/checkout@v4  # 更新到最新版本  
        with:  
          fetch-depth: 0  
  
      # 2. 设置 Go 版本为 1.22  
      - name: Set up Go  
        uses: actions/setup-go@v5  # 更新到最新版本  
        with:  
          go-version: '1.22'  
  
      # 3. 缓存 apt 包和安装完整的交叉编译工具链  
      - name: Cache apt packages  
        uses: actions/cache@v4  
        with:  
          path: |  
            /var/cache/apt/archives  
            /var/lib/apt/lists  
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/release.yml') }}  
  
      - name: Install Cross-Compilation Toolchains  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y \  
            build-essential \  
            gcc-x86-64-linux-gnu \  
            g++-x86-64-linux-gnu \  
            gcc-aarch64-linux-gnu \  
            g++-aarch64-linux-gnu \  
            gcc-arm-linux-gnueabihf \  
            g++-arm-linux-gnueabihf \  
            gcc-arm-linux-gnueabi \  
            g++-arm-linux-gnueabi \  
            libssl-dev \  
            libcurl4-openssl-dev \  
            pkg-config  
  
      # 4. 验证交叉编译器安装  
      - name: Verify Cross Compilers  
        run: |  
          echo "=== Verifying installed compilers ==="  
          which gcc g++ || echo "Native compilers not found"  
          which x86_64-linux-gnu-gcc x86_64-linux-gnu-g++ || echo "x86_64 compilers not found"  
          which aarch64-linux-gnu-gcc aarch64-linux-gnu-g++ || echo "aarch64 compilers not found"  
          which arm-linux-gnueabihf-gcc arm-linux-gnueabihf-g++ || echo "armhf compilers not found"  
          which arm-linux-gnueabi-gcc arm-linux-gnueabi-g++ || echo "armel compilers not found"  
            
          echo "=== Compiler versions ==="  
          aarch64-linux-gnu-gcc --version | head -1  
          arm-linux-gnueabihf-gcc --version | head -1  
          arm-linux-gnueabi-gcc --version | head -1  
  
      # 5. 运行 GoReleaser  
      - name: Run GoReleaser  
        uses: goreleaser/goreleaser-action@v4  
        with:  
          version: latest  
          args: release --clean  
        env:  
          GITHUB_TOKEN: ${{ secrets.XXY_TOKEN }}  
          # 设置动态库路径  
          LD_LIBRARY_PATH: /opt/libs:/usr/lib/aarch64-linux-gnu:/usr/lib/arm-linux-gnueabihf  
          # 这些环境变量实际上不会被 GoReleaser 使用，因为它使用配置文件中的 CC/CXX 设置  
          CC_LINUX_ARM_V7: arm-linux-gnueabihf-gcc  
          CC_LINUX_ARM_V5: arm-linux-gnueabi-gcc  
          CC_LINUX_ARM64: aarch64-linux-gnu-gcc  
  
      # 6. 验证构建产物（可选）  
      - name: Verify Build Artifacts  
        run: |  
          echo "=== Listing dist directory ==="  
          find dist/ -name "*.tar.gz" -o -name "*.zip" | head -10  
            
          echo "=== Checking for shared libraries ==="  
          find dist/ -name "*.so" -o -name "*.dll" | head -5  
            
          echo "=== Checking for header files ==="  
          find dist/ -name "*.h" | head -5