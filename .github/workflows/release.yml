name: Release

on:
  workflow_dispatch:  # 手动触发
  push:
    tags:
      - 'v*.*.*'       # 当推送符合版本模式的标签时触发
    paths-ignore:
      - '**/*.md'      # 忽略 Markdown 文件的变更

jobs:
  build-and-release:
    if: "!contains(github.ref, '.beta')"   # 排除包含 .beta 的标签
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码，获取完整的 Git 历史记录
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置 Go 版本为 1.22
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # 3. 安装依赖，包括交叉编译器和开发库
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc-aarch64-linux-gnu \      # ARM64 交叉编译器
            gcc-arm-linux-gnueabihf \    # ARMv7 (armhf) 交叉编译器
            gcc-arm-linux-gnueabi \      # ARMv5 (armel) 交叉编译器
            libssl-dev \
            libcurl4-openssl-dev \
            pkg-config

      # 4. 设置动态库路径，确保 ARM64 和 ARMv7 架构的库可以找到
      - name: Set LD_LIBRARY_PATH
        run: |
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/libs:/usr/lib/aarch64-linux-gnu:/usr/lib/arm-linux-gnueabihf"
          echo "LD_LIBRARY_PATH set to $LD_LIBRARY_PATH"
        shell: bash

      # 5. 列出所有 ARM 平台的 GCC 编译器以进行诊断
      - name: List ARM GCC Compilers
        run: |
          echo "=== ARM Linux cross-compilers in /usr/bin ==="
          ls -l /usr/bin/arm-linux-gnueabihf-gcc* /usr/bin/arm-linux-gnueabi-gcc* || echo "Cross-compilers not found"
          echo "=== File details for cross-compilers ==="
          file /usr/bin/arm-linux-gnueabihf-gcc* /usr/bin/arm-linux-gnueabi-gcc* || true

      # 6. 验证 ARMv7 和 ARMv5 交叉编译器是否可用
      - name: Verify Cross Compilers
        run: |
          which arm-linux-gnueabihf-gcc arm-linux-gnueabi-gcc || echo "Cross compiler not in PATH"
          echo "ARMv7 GCC version: $((arm-linux-gnueabihf-gcc --version) 2>&1 | head -1)"
          echo "ARMv5 GCC version: $((arm-linux-gnueabi-gcc --version) 2>&1 | head -1)"

      # 7. 运行 GoReleaser 发布构建
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest           # 使用最新版本的 GoReleaser
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.XXY_TOKEN }}
          # 为各架构设置对应的交叉编译器
          CC_LINUX_ARM64: aarch64-linux-gnu-gcc
          CC_LINUX_ARM_V7: arm-linux-gnueabihf-gcc
          CC_LINUX_ARM_V5: arm-linux-gnueabi-gcc
          LD_LIBRARY_PATH: /opt/libs:/usr/lib/aarch64-linux-gnu:/usr/lib/arm-linux-gnueabihf

      # 8. （可选）验证构建产物的动态库依赖
      - name: Check ARMv7 Dynamic Dependencies
        if: ${{ steps.goreleaser.outcome == 'success' }}
        run: ldd dist/xixunyunsign_*_linux_armhf*/xixunyunsign  || echo "No ARMv7 dynamic dependencies found"

      - name: Check ARM64 Dynamic Dependencies
        if: ${{ steps.goreleaser.outcome == 'success' }}
        run: ldd dist/xixunyunsign_*_linux_arm64*/xixunyunsign  || echo "No ARM64 dynamic dependencies found"
