name: Release

on:
  workflow_dispatch: # 手动触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码，获取完整的 Git 历史记录
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. 设置 Go 版本为 1.22
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      # 3. 安装依赖，包括交叉编译器
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi

      # 4. 列出所有 ARM GCC 编译器以进行诊断
      - name: List ARM GCC Compilers
        run: |
          echo "Listing all arm-linux-gnueabihf-gcc* and arm-linux-gnueabi-gcc* in /usr/bin:"
          ls -l /usr/bin/arm-linux-gnueabihf-gcc*
          ls -l /usr/bin/arm-linux-gnueabi-gcc*
          echo "File details:"
          file /usr/bin/arm-linux-gnueabihf-gcc*
          file /usr/bin/arm-linux-gnueabi-gcc*

      # 5. 验证 ARMv7 和 ARMv5 编译器是否可用
      - name: Verify Cross Compilers
        run: |
          which arm-linux-gnueabihf-gcc arm-linux-gnueabi-gcc
          arm-linux-gnueabihf-gcc --version
          arm-linux-gnueabi-gcc --version

      # 6. 验证 ARMv5 编译器是否支持 -marm 选项
      - name: Verify ARMv5 Compiler Options
        run: |
          arm-linux-gnueabi-gcc -Q --help=target | grep "marm" || echo "-marm not supported"

      # 7. 列出 Git 标签以确保 GoReleaser 能正确获取标签信息
      - name: List Git Tags
        run: git tag

      # 8. 运行 GoReleaser
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest # 安装最新版本的 GoReleaser
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 设置特定架构的 C 编译器
          CC_LINUX_ARM_V7: arm-linux-gnueabihf-gcc
          CC_LINUX_ARM_V5: arm-linux-gnueabi-gcc
